{"version":3,"sources":["reportWebVitals.js","app/utils/validator.js","app/components/common/form/textField.jsx","app/components/common/form/selectField.jsx","app/components/common/form/radio.Field.jsx","app/components/common/form/multiSelectField.jsx","app/components/common/backButton.jsx","app/services/localStorage.service.js","app/services/auth.service.js","app/services/http.service.js","app/services/qaulity.service.js","app/utils/isOutdated.js","app/store/qualities.js","app/services/profession.service.js","app/store/professions.js","app/services/user.service.js","app/utils/generateAuthError.js","app/utils/history.js","app/store/users.js","app/components/page/editUserPage/index.js","app/components/page/editUserPage/editUserPage.jsx","app/components/ui/userCard.jsx","app/components/ui/qualities/quality.jsx","app/components/ui/qualities/index.js","app/components/ui/qualities/qualitiesList.jsx","app/components/ui/qualitiesCard.jsx","app/components/ui/meetingsCard.jsx","app/utils/displayDate.js","app/components/common/comments/comment.jsx","app/components/common/comments/commentsList.jsx","app/components/common/form/textAreaField.jsx","app/components/common/comments/addCommentForm.jsx","app/components/common/comments/index.js","app/services/comment.service.js","app/store/comments.js","app/components/ui/comments.jsx","app/components/page/userPage/index.js","app/components/page/userPage/userPage.jsx","app/components/common/pagination.jsx","app/components/common/groupList.jsx","app/components/ui/searchStatus.jsx","app/components/common/bookmark.jsx","app/components/common/table/tableBody.jsx","app/components/common/table/tableHeader.jsx","app/components/common/table/index.js","app/components/common/table/table.jsx","app/components/ui/profession.jsx","app/components/ui/usersTable.jsx","app/components/page/usersListPage/index.js","app/components/page/usersListPage/usersListPage.jsx","app/utils/paginate.js","app/components/ui/hoc/usersLoader.jsx","app/layouts/users.jsx","app/components/common/form/checkBoxField.jsx","app/components/ui/loginForm.jsx","app/components/ui/registerForm.jsx","app/layouts/login.jsx","app/layouts/main.jsx","app/components/ui/navProfile.jsx","app/components/ui/navBar.jsx","app/components/common/protectedRoute.jsx","app/layouts/logOut.jsx","app/components/ui/hoc/appLoader.jsx","app/App.js","app/store/createStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","validator","data","config","errors","validate","validateMethod","statusValidate","trim","test","length","value","message","fieldName","error","TextField","label","type","name","onChange","useState","showPassword","setShowPassword","className","htmlFor","id","target","onClick","prevState","defaultProps","SelectField","defaultOption","options","optionsArray","Array","isArray","Object","keys","map","optionName","_id","disabled","option","RadioField","handleChange","checked","MultiSelectField","defaultValue","isMulti","closeMenuOnSelect","classNamePrefix","BackHistoryButton","history","useHistory","goBack","TOKEN_KEY","REFRESH_KEY","EXPIRES_KEY","USERID_KEY","localStorageService","setTokens","refreshToken","accessToken","userId","expiresIn","expiresDate","Date","getTime","localStorage","setItem","getAccessToken","getItem","getRefreshToken","getTokenExpiresDate","getUserId","removeAuthData","removeItem","httpAuth","axios","create","baseURL","apiEndpoint","authService","register","payload","post","login","a","email","password","returnSecureToken","refresh","grant_type","refresh_token","http","configFile","interceptors","request","use","isExpired","now","isFireBase","containSlash","url","slice","idToken","id_token","expires_in","localId","user_id","params","auth","headers","Authorization","Promise","reject","response","res","content","key","status","console","log","toast","httpService","get","put","delete","patch","qualityService","fetchAll","isOutdated","date","qualitiesSlice","createSlice","initialState","entities","isLoading","lastFetch","reducers","qualitiesRequested","state","qualitiesReceved","action","qualitiesRequestFiled","qualitiesReducer","reducer","actions","loadQualitiesList","dispatch","getState","qualities","professionService","req","professionsSlice","professionsRequested","professionsReceved","professionsRequestFiled","professionsReducer","userEndpoint","userService","getCurrentUser","update","generetaAuthError","createBrowserHistory","isLoggedIn","dataLoaded","usersSlice","usersRequested","usersReceved","usersRequestFiled","authRequestSuccess","authRequestFailed","userCreated","push","userLoggedOut","userUpdateSuccessed","findIndex","u","authRequested","usersReducer","createAction","userUpdateFailed","userUpdateRequested","loadUsersList","getUserById","users","find","EditUserPage","setIsLoading","setData","currentUser","useSelector","useDispatch","qualitiesLoading","qualitiesList","q","professions","professionLoading","professionsList","p","setErrors","transformData","qualitiesIds","qualitiesArray","qualId","quality","getQualitiesListByIds","qual","useEffect","validatorConfog","isRequired","isEmail","isValid","onSubmit","e","preventDefault","profession","sex","UserCard","user","location","pathname","src","image","width","role","rate","Quality","color","Qualities","QualitiesCard","MeetingsCard","displayDate","dateNow","getFullYear","getDay","getHours","minutesDif","getMinutes","toLocaleString","month","getMonth","getDate","Comment","created","created_at","onRemove","currentUserId","alt","height","CommentsList","comments","comment","TextAreaField","AddCommentForm","commentEndpoint","commentService","createComment","getComments","pageId","orderBy","equalTo","removeComment","commentId","commentsSlice","commentsRequested","commentsReceved","commentsRequestFiled","commetnCreated","commentRemoved","filter","c","commentsReducer","addCommentRequested","removeCommentRequested","Comments","useParams","loadCommentsList","sortedComments","UserPage","completedMeetings","Pagination","itemsCount","pageSize","onPageChange","currentPage","pagesCount","Math","ceil","pages","_","range","page","GroupList","items","valueProperty","contentProperty","onItemSelect","selectedItem","item","SearchStatus","number","lastOne","Number","toString","indexOf","renderPhrase","BookMark","rest","TableBody","columns","renderContent","column","component","path","TableHeader","onSort","selectedSort","rendeSortArrow","currentPath","order","undefined","scope","Table","children","Profession","prof","getProfessionbyId","UserTable","onToggleBookMark","to","bookmark","UsersListPage","professionsLoading","setCurrentPage","searchQuery","setSearchQuery","selectedProf","setSelectedProf","sortBy","setSortBy","filteredUsers","toLowerCase","count","usersCrop","pageNumber","startIndex","take","paginate","placeholder","onDelete","newArray","pageIndex","UsersLoader","dataStatus","propTypes","PropTypes","oneOfType","arrayOf","node","Users","edit","CheckBoxField","LoginForm","stayOn","loginError","dispath","redirect","from","code","errorMessage","RegisterForm","licence","min","isCapitalSymbol","isContainDigit","newData","Login","formType","setFormType","toggleFormType","Main","NavProfile","isOpen","setOpen","NavBar","aria-current","ProtectedRoute","Component","render","props","LogOut","AppLoader","usersStatusLoading","App","exact","require","combineReducers","configureStore","rootReducer","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.089bc23c.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","export function validator(data, config) {\n    const errors = {};\n    function validate(validateMethod, data, config) {\n        let statusValidate;\n        switch (validateMethod) {\n            case \"isRequired\": {\n                if (typeof data === \"boolean\") {\n                    statusValidate = !data;\n                } else {\n                    statusValidate = data.trim() === \"\";\n                }\n                break;\n            }\n            case \"isEmail\": {\n                const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n                statusValidate = !emailRegExp.test(data);\n                break;\n            }\n            case \"isCapitalSymbol\": {\n                const capitalRegExp = /[A-Z]+/g;\n                statusValidate = !capitalRegExp.test(data);\n                break;\n            }\n            case \"isContainDigit\": {\n                const digitRegExp = /\\d+/g;\n                statusValidate = !digitRegExp.test(data);\n                break;\n            }\n            case \"min\": {\n                statusValidate = data.length < config.value;\n                break;\n            }\n            default:\n                break;\n        }\n        if (statusValidate) return config.message;\n    }\n    for (const fieldName in data) {\n        for (const validateMethod in config[fieldName]) {\n            const error = validate(\n                validateMethod,\n                data[fieldName],\n                config[fieldName][validateMethod]\n            );\n            if (error && !errors[fieldName]) {\n                errors[fieldName] = error;\n            }\n        }\n    }\n    return errors;\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextField = ({ label, type, name, value, onChange, error }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n    const toggleShowPassword = () => {\n        setShowPassword((prevState) => !prevState);\n    };\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}> {label}</label>\n            <div className=\"input-group has-validation\">\n                <input\n                    type={showPassword ? \"text\" : type}\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n\n                {type === \"password\" && (\n                    <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={toggleShowPassword}\n                    >\n                        <i\n                            className={\n                                \"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")\n                            }\n                        ></i>\n                    </button>\n                )}\n                {error && <div className=\"invalid-feedback \">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextField.defaultProps = {\n    type: \"text\"\n};\nTextField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SelectField = ({\n    label,\n    value,\n    onChange,\n    defaultOption,\n    options,\n    error,\n    name\n}) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-select\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((optionName) => ({\n                  name: options[optionName].name,\n                  value: options[optionName]._id\n              }))\n            : options;\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor=\"validationCustom04\" className=\"form-label\">\n                {label}\n            </label>\n            <select\n                className={getInputClasses()}\n                id=\"validationCustom04\"\n                name={name}\n                value={value}\n                onChange={handleChange}\n            >\n                <option disabled value=\"\">\n                    {defaultOption}\n                </option>\n                {optionsArray &&\n                    optionsArray.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n            </select>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\nSelectField.propTypes = {\n    defaultOption: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string,\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    name: PropTypes.string\n};\n\nexport default SelectField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst RadioField = ({ options, name, onChange, value, label }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <div>\n                {options.map((option) => (\n                    <div\n                        key={option.name + \"_\" + option.value}\n                        className=\"form-check form-check-inline\"\n                    >\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name={name}\n                            id={option.name + \"_\" + option.value}\n                            checked={option.value === value}\n                            value={option.value}\n                            onChange={handleChange}\n                        />\n                        <label\n                            className=\"form-check-label\"\n                            htmlFor={option.name + \"_\" + option.value}\n                        >\n                            {option.name}\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nRadioField.propTypes = {\n    options: PropTypes.array,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    label: PropTypes.string\n};\n\nexport default RadioField;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport PropTypes from \"prop-types\";\n\nconst MultiSelectField = ({ options, onChange, name, label, defaultValue }) => {\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((optionName) => ({\n                  label: options[optionName].name,\n                  value: options[optionName]._id\n              }))\n            : options;\n\n    const handleChange = (value) => {\n        onChange({ name: name, value });\n    };\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <Select\n                isMulti\n                closeMenuOnSelect={false}\n                defaultValue={defaultValue}\n                options={optionsArray}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                onChange={handleChange}\n                name={name}\n            />\n        </div>\n    );\n};\nMultiSelectField.propTypes = {\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    defaultValue: PropTypes.array\n};\n\nexport default MultiSelectField;\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nconst BackHistoryButton = () => {\n    const history = useHistory();\n    return (\n        <button className=\"btn btn-primary\" onClick={() => history.goBack()}>\n            <i className=\"bi bi-caret-left\"></i>\n            Назад\n        </button>\n    );\n};\n\nexport default BackHistoryButton;\n","const TOKEN_KEY = \"jwt-token\";\nconst REFRESH_KEY = \"jwt-refresh-token\";\nconst EXPIRES_KEY = \"jwt-expires\";\nconst USERID_KEY = \"user-local-id\";\n\nexport function setTokens({\n    refreshToken,\n    accessToken,\n    userId,\n    expiresIn = 3600\n}) {\n    const expiresDate = new Date().getTime() + expiresIn * 1000;\n    localStorage.setItem(USERID_KEY, userId);\n    localStorage.setItem(TOKEN_KEY, accessToken);\n    localStorage.setItem(REFRESH_KEY, refreshToken);\n    localStorage.setItem(EXPIRES_KEY, expiresDate);\n}\nexport function getAccessToken() {\n    return localStorage.getItem(TOKEN_KEY);\n}\nexport function getRefreshToken() {\n    return localStorage.getItem(REFRESH_KEY);\n}\nexport function removeAuthData() {\n    localStorage.removeItem(USERID_KEY);\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_KEY);\n    localStorage.removeItem(EXPIRES_KEY);\n}\n\nexport function getTokenExpiresDate() {\n    return localStorage.getItem(EXPIRES_KEY);\n}\nexport function getUserId() {\n    return localStorage.getItem(USERID_KEY);\n}\nconst localStorageService = {\n    setTokens,\n    getAccessToken,\n    getRefreshToken,\n    getTokenExpiresDate,\n    getUserId,\n    removeAuthData\n};\nexport default localStorageService;\n","import axios from \"axios\";\nimport localStorageService from \"./localStorage.service\";\nimport config from \"../config.json\";\n\nconst httpAuth = axios.create({\n    baseURL: config.apiEndpoint + \"/auth/\"\n});\n\nconst authService = {\n    register: async (payload) => {\n        const { data } = await httpAuth.post(`signUp`, payload);\n        return data;\n    },\n    login: async ({ email, password }) => {\n        const { data } = await httpAuth.post(`signInWithPassword`, {\n            email,\n            password,\n            returnSecureToken: true\n        });\n        return data;\n    },\n    refresh: async () => {\n        const { data } = await httpAuth.post(\"token\", {\n            grant_type: \"refresh_token\",\n            refresh_token: localStorageService.getRefreshToken()\n        });\n        return data;\n    }\n};\nexport default authService;\n","import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport authService from \"./auth.service\";\n\nimport localStorageService from \"./localStorage.service\";\n\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint\n});\n\nhttp.interceptors.request.use(\n  async function (config) {\n    const expiresDate = localStorageService.getTokenExpiresDate();\n    const refreshToken = localStorageService.getRefreshToken();\n    const isExpired = refreshToken && expiresDate < Date.now();\n\n    if (configFile.isFireBase) {\n      const containSlash = /\\/$/gi.test(config.url);\n      config.url =\n        (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n      if (isExpired) {\n        const data = await authService.refresh();\n\n        localStorageService.setTokens({\n          refreshToken: data.refresh_token,\n          idToken: data.id_token,\n          expiresIn: data.expires_in,\n          localId: data.user_id\n        });\n      }\n      const accessToken = localStorageService.getAccessToken();\n      if (accessToken) {\n        config.params = { ...config.params, auth: accessToken };\n      }\n    } else {\n      if (isExpired) {\n        const data = await authService.refresh();\n        localStorageService.setTokens(data);\n      }\n      const accessToken = localStorageService.getAccessToken();\n      if (accessToken) {\n        config.headers = {\n          ...config.headers,\n          Authorization: `Bearer ${accessToken}`\n        };\n      }\n    }\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\nfunction transormData(data) {\n  return data && !data._id\n    ? Object.keys(data).map((key) => ({\n      ...data[key]\n    }))\n    : data;\n}\n\nhttp.interceptors.response.use(\n  (res) => {\n    if (configFile.isFireBase) {\n      res.data = { content: transormData(res.data) };\n    }\n    res.data = { content: res.data };\n    return res;\n  },\n  function (error) {\n    const expectedErrors =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n\n    if (!expectedErrors) {\n      console.log(error);\n      toast.error(\"Somthing was wrong. Try it later\");\n    }\n    return Promise.reject(error);\n  }\n);\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete,\n  patch: http.patch\n};\nexport default httpService;\n","import httpService from \"./http.service\";\nconst qualityEndpoint = \"quality/\";\n\nconst qualityService = {\n    fetchAll: async () => {\n        const { data } = await httpService.get(qualityEndpoint);\n        return data;\n    }\n};\nexport default qualityService;\n","function isOutdated(date) {\n    if (Date.now() - date > 10 * 60 * 100) {\n        return true;\n    }\n    return false;\n}\nexport default isOutdated;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport qualityService from \"../services/qaulity.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst qualitiesSlice = createSlice({\n    name: \"qualities\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        qualitiesRequested: (state) => {\n            state.isLoading = true;\n        },\n        qualitiesReceved: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        qualitiesRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: qualitiesReducer, actions } = qualitiesSlice;\nconst { qualitiesRequested, qualitiesReceved, qualitiesRequestFiled } = actions;\n\nexport const loadQualitiesList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().qualities;\n    if (isOutdated(lastFetch)) {\n        dispatch(qualitiesRequested());\n        try {\n            const { content } = await qualityService.fetchAll();\n            dispatch(qualitiesReceved(content));\n        } catch (error) {\n            dispatch(qualitiesRequestFiled(error.message));\n        }\n    }\n};\n\nexport const getQualities = () => (state) => state.qualities.entities;\nexport const getQualitiesLoadingStatus = () => (state) =>\n    state.qualities.isLoading;\nexport const getQulitiesByIds = (qualitiesIds) => (state) => {\n    if (state.qualities.entities) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of state.qualities.entities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    return [];\n};\n\nexport default qualitiesReducer;\n","import httpService from \"./http.service\";\n\nconst professionEndpoint = \"profession/\";\n\nconst professionService = {\n    get: async () => {\n        const req = await httpService.get(professionEndpoint);\n        return req.data;\n    }\n};\nexport default professionService;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst professionsSlice = createSlice({\n    name: \"professions\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        professionsRequested: (state) => {\n            state.isLoading = true;\n        },\n        professionsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        professionsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: professionsReducer, actions } = professionsSlice;\nconst { professionsRequested, professionsReceved, professionsRequestFiled } =\n    actions;\n\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().professions;\n    if (isOutdated(lastFetch)) {\n        dispatch(professionsRequested());\n        try {\n            const { content } = await professionService.get();\n            dispatch(professionsReceved(content));\n        } catch (error) {\n            dispatch(professionsRequestFiled(error.message));\n        }\n    }\n};\nexport const getProfessions = () => (state) => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => (state) =>\n    state.professions.isLoading;\nexport const getProfessionbyId = (id) => (state) => {\n    if (state.professions.entities) {\n        return state.professions.entities.find((p) => p._id === id);\n    }\n};\nexport default professionsReducer;\n","import httpService from \"./http.service\";\nimport localStorageService from \"./localStorage.service\";\n\nconst userEndpoint = \"user/\";\n\nconst userService = {\n    get: async () => {\n        const { data } = await httpService.get(userEndpoint);\n        return data;\n    },\n    create: async (payload) => {\n        const { data } = await httpService.put(\n            userEndpoint + payload._id,\n            payload\n        );\n        return data;\n    },\n    getCurrentUser: async () => {\n        const { data } = await httpService.get(\n            userEndpoint + localStorageService.getUserId()\n        );\n        return data;\n    },\n    update: async (payload) => {\n        const { data } = await httpService.patch(\n            userEndpoint + localStorageService.getUserId(),\n            payload\n        );\n        return data;\n    }\n};\nexport default userService;\n","export function generetaAuthError(message) {\n    switch (message) {\n        case \"INVALID_PASSWORD\":\n            return \"Email или пароль введены некорректно\";\n        case \"EMAIL_EXISTS\":\n            return \"Пользователь с таким Email уже существует\";\n        default:\n            return \"Слишком много попыток входа. Попробуйте позднее\";\n    }\n}\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nexport default history;\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport userService from \"../services/user.service\";\nimport { generetaAuthError } from \"../utils/generateAuthError\";\nimport history from \"../utils/history\";\nconst initialState = localStorageService.getAccessToken()\n    ? {\n          entities: null,\n          isLoading: true,\n          error: null,\n          auth: { userId: localStorageService.getUserId() },\n          isLoggedIn: true,\n          dataLoaded: false\n      }\n    : {\n          entities: null,\n          isLoading: false,\n          error: null,\n          auth: null,\n          isLoggedIn: false,\n          dataLoaded: false\n      };\n\nconst usersSlice = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {\n        usersRequested: (state) => {\n            state.isLoading = true;\n        },\n        usersReceved: (state, action) => {\n            state.entities = action.payload;\n            state.dataLoaded = true;\n            state.isLoading = false;\n        },\n        usersRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        authRequestSuccess: (state, action) => {\n            state.auth = action.payload;\n            state.isLoggedIn = true;\n        },\n        authRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        userCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        userLoggedOut: (state) => {\n            state.entities = null;\n            state.isLoggedIn = false;\n            state.auth = null;\n            state.dataLoaded = false;\n        },\n        userUpdateSuccessed: (state, action) => {\n            state.entities[\n                state.entities.findIndex((u) => u._id === action.payload._id)\n            ] = action.payload;\n        },\n        authRequested: (state) => {\n            state.error = null;\n        }\n    }\n});\n\nconst { reducer: usersReducer, actions } = usersSlice;\nconst {\n    usersRequested,\n    usersReceved,\n    usersRequestFiled,\n    authRequestFailed,\n    authRequestSuccess,\n    userLoggedOut,\n    userUpdateSuccessed\n} = actions;\n\nconst authRequested = createAction(\"users/authRequested\");\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\n\nexport const login =\n    ({ payload, redirect }) =>\n    async (dispatch) => {\n        const { email, password } = payload;\n        dispatch(authRequested());\n        try {\n            const data = await authService.login({ email, password });\n            localStorageService.setTokens(data);\n            dispatch(authRequestSuccess({ userId: data.userId }));\n            history.push(redirect);\n        } catch (error) {\n            const { code, message } = error.response.data.error;\n            if (code === 400) {\n                const errorMessage = generetaAuthError(message);\n                dispatch(authRequestFailed(errorMessage));\n            } else {\n                dispatch(authRequestFailed(error.message));\n            }\n        }\n    };\n\nexport const signUp = (payload) =>\n    async (dispatch) => {\n        dispatch(authRequested());\n        try {\n            const data = await authService.register(payload);\n            localStorageService.setTokens(data);\n            dispatch(authRequestSuccess({ userId: data.userId }));\n            history.push(\"/users\");\n        } catch (error) {\n            dispatch(authRequestFailed(error.message));\n        }\n    };\nexport const logOut = () => (dispatch) => {\n    localStorageService.removeAuthData();\n    dispatch(userLoggedOut());\n    history.push(\"/\");\n};\nexport const loadUsersList = () => async (dispatch) => {\n    dispatch(usersRequested());\n    try {\n        const { content } = await userService.get();\n        dispatch(usersReceved(content));\n    } catch (error) {\n        dispatch(usersRequestFiled(error.message));\n    }\n};\nexport const updateUser = (payload) => async (dispatch) => {\n    dispatch(userUpdateRequested());\n    try {\n        const { content } = await userService.update(payload);\n        dispatch(userUpdateSuccessed(content));\n        history.push(`/users/${content._id}`);\n    } catch (error) {\n        dispatch(userUpdateFailed(error.message));\n    }\n};\n\nexport const getUsersList = () => (state) => state.users.entities;\nexport const getCurrentUserData = () => (state) => {\n    return state.users.entities\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\n        : null;\n};\nexport const getUserById = (userId) => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find((u) => u._id === userId);\n    }\n};\n\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\nexport const getAuthErrors = () => (state) => state.users.error;\nexport default usersReducer;\n","import EditUserPage from \"./editUserPage\";\nexport default EditUserPage;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../../utils/validator\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radio.Field\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    getQualities,\n    getQualitiesLoadingStatus\n} from \"../../../store/qualities\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { getCurrentUserData, updateUser } from \"../../../store/users\";\n\nconst EditUserPage = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState();\n    const currentUser = useSelector(getCurrentUserData());\n    const dispatch = useDispatch();\n    const qualities = useSelector(getQualities());\n    const qualitiesLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n    const professionLoading = useSelector(getProfessionsLoadingStatus());\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n\n    const [errors, setErrors] = useState({});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        dispatch(\n            updateUser({\n                ...data,\n                qualities: data.qualities.map((q) => q.value)\n            })\n        );\n    };\n    function getQualitiesListByIds(qualitiesIds) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of qualities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    const transformData = (data) => {\n        const result = getQualitiesListByIds(data).map((qual) => ({\n            label: qual.name,\n            value: qual._id\n        }));\n\n        return result;\n    };\n    useEffect(() => {\n        if (!professionLoading && !qualitiesLoading && currentUser && !data) {\n            setData({\n                ...currentUser,\n                qualities: transformData(currentUser.qualities)\n            });\n        }\n    }, [professionLoading, qualitiesLoading, currentUser, data]);\n    useEffect(() => {\n        if (data && isLoading) {\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n\n        name: {\n            isRequired: {\n                message: \"Введите ваше имя\"\n            }\n        }\n    };\n    useEffect(() => validate(), [data]);\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n    return (\n        <div className=\"container mt-5\">\n            <BackHistoryButton />\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {!isLoading && Object.keys(professions).length > 0 ? (\n                        <form onSubmit={handleSubmit}>\n                            <TextField\n                                label=\"Имя\"\n                                name=\"name\"\n                                value={data.name}\n                                onChange={handleChange}\n                                error={errors.name}\n                            />\n                            <TextField\n                                label=\"Электронная почта\"\n                                name=\"email\"\n                                value={data.email}\n                                onChange={handleChange}\n                                error={errors.email}\n                            />\n                            <SelectField\n                                label=\"Выбери свою профессию\"\n                                defaultOption=\"Choose...\"\n                                name=\"profession\"\n                                options={professionsList}\n                                onChange={handleChange}\n                                value={data.profession}\n                                error={errors.profession}\n                            />\n                            <RadioField\n                                options={[\n                                    { name: \"Male\", value: \"male\" },\n                                    { name: \"Female\", value: \"female\" },\n                                    { name: \"Other\", value: \"other\" }\n                                ]}\n                                value={data.sex}\n                                name=\"sex\"\n                                onChange={handleChange}\n                                label=\"Выберите ваш пол\"\n                            />\n                            <MultiSelectField\n                                defaultValue={data.qualities}\n                                options={qualitiesList}\n                                onChange={handleChange}\n                                name=\"qualities\"\n                                label=\"Выберите ваши качесвта\"\n                            />\n                            <button\n                                type=\"submit\"\n                                disabled={!isValid}\n                                className=\"btn btn-primary w-100 mx-auto\"\n                            >\n                                Обновить\n                            </button>\n                        </form>\n                    ) : (\n                        \"Loading...\"\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditUserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserData } from \"../../store/users\";\nconst UserCard = ({ user }) => {\n    const history = useHistory();\n\n    const currentUser = useSelector(getCurrentUserData());\n    const handleClick = () => {\n        history.push(history.location.pathname + \"/edit\");\n    };\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body\">\n                {currentUser._id === user._id && (\n                    <button\n                        className=\"position-absolute top-0 end-0 btn btn-light btn-sm\"\n                        onClick={handleClick}\n                    >\n                        <i className=\"bi bi-gear\"></i>\n                    </button>\n                )}\n\n                <div className=\"d-flex flex-column align-items-center text-center position-relative\">\n                    <img\n                        src={user.image}\n                        className=\"rounded-circle\"\n                        width=\"150\"\n                    />\n                    <div className=\"mt-3\">\n                        <h4>{user.name}</h4>\n                        <p className=\"text-secondary mb-1\">\n                            {user.profession.name}\n                        </p>\n                        <div className=\"text-muted\">\n                            <i\n                                className=\"bi bi-caret-down-fill text-primary\"\n                                role=\"button\"\n                            ></i>\n                            <i\n                                className=\"bi bi-caret-up text-secondary\"\n                                role=\"button\"\n                            ></i>\n                            <span className=\"ms-2\">{user.rate}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nUserCard.propTypes = {\n    user: PropTypes.object\n};\n\nexport default UserCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst Quality = ({ _id, color, name }) => {\n    return (\n        <span className={\"badge m-1 bg-\" + color} key={_id}>\n            {name}\n        </span>\n    );\n    // return \"something\";\n};\nQuality.propTypes = {\n    _id: PropTypes.string.isRequired,\n    color: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default Quality;\n","import Qualities from \"./qualitiesList\";\nexport default Qualities;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Quality from \"./quality\";\nimport {\n    getQualitiesLoadingStatus,\n    getQulitiesByIds,\n    loadQualitiesList\n} from \"../../../store/qualities\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst QualitiesList = ({ qualities }) => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = useSelector(getQulitiesByIds(qualities));\n    useEffect(() => {\n        dispatch(loadQualitiesList());\n    }, []);\n\n    if (isLoading) return \"Loadind ...\";\n\n    return (\n        <>\n            {qualitiesList.map((qual) => (\n                <Quality key={qual._id} {...qual} />\n            ))}\n        </>\n    );\n};\n\nQualitiesList.propTypes = {\n    qualities: PropTypes.array\n};\n\nexport default QualitiesList;\n","import React from \"react\";\nimport Qualities from \"./qualities\";\nimport PropTypes from \"prop-types\";\n\nconst QualitiesCard = ({ data }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Qualities</span>\n                </h5>\n                <p className=\"card-text\">\n                    <Qualities qualities={data} />\n                </p>\n            </div>\n        </div>\n    );\n};\nQualitiesCard.propTypes = {\n    data: PropTypes.array\n};\n\nexport default QualitiesCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst MeetingsCard = ({ value }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\n                <h5 className=\"card-title\">\n                    <span>Completed meetings</span>\n                </h5>\n\n                <h1 className=\"display-1\">{value}</h1>\n            </div>\n        </div>\n    );\n};\nMeetingsCard.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nexport default MeetingsCard;\n","export function displayDate(data) {\n    const date = new Date(data);\n    const dateNow = new Date();\n    const yearDif = dateNow.getFullYear() - date.getFullYear();\n    if (yearDif === 0) {\n        const dayDif = dateNow.getDay() - date.getDay();\n        if (dayDif === 0) {\n            const hourDif = dateNow.getHours() - date.getHours();\n            if (hourDif === 0) {\n                const minutesDif = dateNow.getMinutes() - date.getMinutes();\n\n                if (minutesDif >= 0 && minutesDif < 5) return \"1 минуту назад\";\n                if (minutesDif >= 5 && minutesDif < 10) return \"5 минут назад\";\n                if (minutesDif >= 10 && minutesDif < 30) {\n                    return \"10 минут назад\";\n                }\n                return \"30 минут назад\";\n            }\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }\n\n        return `${date.getDay()} ${date.toLocaleString(\"default\", {\n            month: \"long\"\n        })}`;\n    }\n    return (\n        date.getFullYear() + \".\" + (date.getMonth() + 1) + \"_\" + date.getDate()\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { displayDate } from \"../../../utils/displayDate\";\nimport { getCurrentUserId, getUserById } from \"../../../store/users\";\nimport { useSelector } from \"react-redux\";\nconst Comment = ({\n    content,\n    created_at: created,\n    _id: id,\n    userId,\n    onRemove\n}) => {\n    const currentUserId = useSelector(getCurrentUserId());\n    const user = useSelector(getUserById(userId));\n\n    return (\n        <div className=\"bg-light card-body  mb-3\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"d-flex flex-start \">\n                        <img\n                            src={user.image}\n                            className=\"rounded-circle shadow-1-strong me-3\"\n                            alt=\"avatar\"\n                            width=\"65\"\n                            height=\"65\"\n                        />\n                        <div className=\"flex-grow-1 flex-shrink-1\">\n                            <div className=\"mb-4\">\n                                <div className=\"d-flex justify-content-between align-items-center\">\n                                    <p className=\"mb-1 \">\n                                        {user && user.name}{\" \"}\n                                        <span className=\"small\">\n                                            - {displayDate(created)}\n                                        </span>\n                                    </p>\n                                    {currentUserId === userId && (\n                                        <button\n                                            className=\"btn btn-sm text-primary d-flex align-items-center\"\n                                            onClick={() => onRemove(id)}\n                                        >\n                                            <i className=\"bi bi-x-lg\"></i>\n                                        </button>\n                                    )}\n                                </div>\n                                <p className=\"small mb-0\">{content}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nComment.propTypes = {\n    content: PropTypes.string,\n    edited_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    created_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    userId: PropTypes.string,\n    onRemove: PropTypes.func,\n    _id: PropTypes.string\n};\n\nexport default Comment;\n","import React from \"react\";\n\nimport Comment from \"./comment\";\nimport PropTypes from \"prop-types\";\nconst CommentsList = ({ comments, onRemove }) => {\n    return comments.map((comment) => (\n        <Comment key={comment._id} {...comment} onRemove={onRemove} />\n    ));\n};\nCommentsList.propTypes = {\n    comment: PropTypes.array,\n    onRemove: PropTypes.func\n};\n\nexport default CommentsList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextAreaField = ({ label, name, value, onChange, error }) => {\n    const handleChange = ({ target }) => {\n        onChange({ name: target.name, value: target.value });\n    };\n    const getInputClasses = () => {\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\n    };\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name}> {label}</label>\n            <div className=\"input-group has-validation\">\n                <textarea\n                    id={name}\n                    name={name}\n                    value={value}\n                    onChange={handleChange}\n                    className={getInputClasses()}\n                />\n\n                {error && <div className=\"invalid-feedback \">{error}</div>}\n            </div>\n        </div>\n    );\n};\nTextAreaField.defaultProps = {\n    type: \"text\"\n};\nTextAreaField.propTypes = {\n    label: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    error: PropTypes.string\n};\n\nexport default TextAreaField;\n","import React, { useState } from \"react\";\nimport TextAreaField from \"../form/textAreaField\";\nimport { validator } from \"../../../utils/validator\";\nimport PropTypes from \"prop-types\";\n\nconst AddCommentForm = ({ onSubmit }) => {\n    const [data, setData] = useState({});\n    const [errors, setErrors] = useState({});\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        content: {\n            isRequired: {\n                message: \"Сообщение не может быть пустым\"\n            }\n        }\n    };\n\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n\n    const clearForm = () => {\n        setData({});\n        setErrors({});\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        onSubmit(data);\n        clearForm();\n    };\n\n    return (\n        <div>\n            <h2>New comment</h2>\n            <form onSubmit={handleSubmit}>\n                <TextAreaField\n                    value={data.content || \"\"}\n                    onChange={handleChange}\n                    name=\"content\"\n                    label=\"Сообщение\"\n                    error={errors.content}\n                />\n                <div className=\"d-flex justify-content-end\">\n                    <button className=\"btn btn-primary\">Опубликовать</button>\n                </div>\n            </form>\n        </div>\n    );\n};\nAddCommentForm.propTypes = {\n    onSubmit: PropTypes.func\n};\n\nexport default AddCommentForm;\n","import CommentsList from \"./commentsList\";\nimport AddCommentForm from \"./addCommentForm\";\nexport default CommentsList;\nexport { AddCommentForm };\n","import httpService from \"./http.service\";\nconst commentEndpoint = \"comment/\";\n\nconst commentService = {\n    createComment: async (payload) => {\n        const { data } = await httpService.post(commentEndpoint, payload);\n        return data;\n    },\n    getComments: async (pageId) => {\n        const { data } = await httpService.get(commentEndpoint, {\n            params: {\n                orderBy: \"pageId\",\n                equalTo: `${pageId}`\n            }\n        });\n        return data;\n    },\n    removeComment: async (commentId) => {\n        const { data } = await httpService.delete(commentEndpoint + commentId);\n        return data;\n    }\n};\nexport default commentService;\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n        commentsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commetnCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        commentRemoved: (state, action) => {\n            state.entities = state.entities.filter(\n                (c) => c._id !== action.payload\n            );\n        }\n    }\n});\n\nconst { reducer: commentsReducer, actions } = commentsSlice;\nconst {\n    commentsRequested,\n    commentsReceved,\n    commentsRequestFiled,\n    commetnCreated,\n    commentRemoved\n} = actions;\n\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\n\nexport const loadCommentsList = (userId) => async (dispatch) => {\n    dispatch(commentsRequested());\n    try {\n        const { content } = await commentService.getComments(userId);\n        dispatch(commentsReceved(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const createComment = (payload) => async (dispatch, getState) => {\n    dispatch(addCommentRequested());\n    try {\n        const { content } = await commentService.createComment(payload);\n        dispatch(commetnCreated(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const removeComment = (commentId) => async (dispatch) => {\n    dispatch(removeCommentRequested());\n    try {\n        const { content } = await commentService.removeComment(commentId);\n        if (!content) {\n            dispatch(commentRemoved(commentId));\n        }\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\n\nexport const getComments = () => (state) => state.comments.entities;\nexport const getCommentsLoadingStatus = () => (state) =>\n    state.comments.isLoading;\n\nexport default commentsReducer;\n","import { orderBy } from \"lodash\";\nimport React, { useEffect } from \"react\";\nimport CommentsList, { AddCommentForm } from \"../common/comments\";\nimport {\n    createComment,\n    getComments,\n    getCommentsLoadingStatus,\n    loadCommentsList,\n    removeComment\n} from \"../../store/comments\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nconst Comments = () => {\n    const { userId } = useParams();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(loadCommentsList(userId));\n    }, [userId]);\n    const isLoading = useSelector(getCommentsLoadingStatus());\n\n    const comments = useSelector(getComments());\n    const handleSubmit = (data) => {\n        dispatch(createComment({ ...data, pageId: userId }));\n    };\n    const handleRemoveComment = (id) => {\n        dispatch(removeComment(id));\n    };\n    const sortedComments = orderBy(comments, [\"created_at\"], [\"desc\"]);\n    return (\n        <>\n            <div className=\"card mb-2\">\n                <div className=\"card-body \">\n                    <AddCommentForm onSubmit={handleSubmit} />\n                </div>\n            </div>\n            {sortedComments.length > 0 && (\n                <div className=\"card mb-3\">\n                    <div className=\"card-body \">\n                        <h2>Comments</h2>\n                        <hr />\n                        {!isLoading ? (\n                            <CommentsList\n                                comments={sortedComments}\n                                onRemove={handleRemoveComment}\n                            />\n                        ) : (\n                            \"loading...\"\n                        )}\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Comments;\n","import UserPage from \"./userPage\";\nexport default UserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport UserCard from \"../../ui/userCard\";\nimport QualitiesCard from \"../../ui/qualitiesCard\";\nimport MeetingsCard from \"../../ui/meetingsCard\";\nimport Comments from \"../../ui/comments\";\n\nimport { useSelector } from \"react-redux\";\nimport { getUserById } from \"../../../store/users\";\n\nconst UserPage = ({ userId }) => {\n    const user = useSelector(getUserById(userId));\n\n    if (user) {\n        return (\n            <div className=\"container\">\n                <div className=\"row gutters-sm\">\n                    <div className=\"col-md-4 mb-3\">\n                        <UserCard user={user} />\n                        <QualitiesCard data={user.qualities} />\n                        <MeetingsCard value={user.completedMeetings} />\n                    </div>\n                    <div className=\"col-md-8\">\n                        <Comments />\n                    </div>\n                </div>\n            </div>\n        );\n    } else {\n        return <h1>Loading</h1>;\n    }\n};\n\nUserPage.propTypes = {\n    userId: PropTypes.string.isRequired\n};\n\nexport default UserPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nconst Pagination = ({ itemsCount, pageSize, onPageChange, currentPage }) => {\n    const pagesCount = Math.ceil(itemsCount / pageSize);\n    const pages = _.range(1, pagesCount + 1);\n\n    if (pagesCount === 1) return null;\n    return (\n        <nav>\n            <ul className=\"pagination\">\n                {pages.map((page) => (\n                    <li\n                        key={page}\n                        className={\n                            \"page-item \" +\n                            (page === currentPage ? \"active\" : \"\")\n                        }\n                    >\n                        <a\n                            className=\"page-link\"\n                            onClick={() => {\n                                onPageChange(page);\n                            }}\n                        >\n                            {page}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\nPagination.propTypes = {\n    itemsCount: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    currentPage: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GroupList = ({\n    items,\n    valueProperty,\n    contentProperty,\n    onItemSelect,\n    selectedItem\n}) => {\n    if (!Array.isArray(items)) {\n        return (\n            <ul className=\"list-group\">\n                {Object.keys(items).map((item) => (\n                    <li\n                        key={items[item][valueProperty]}\n                        className={\n                            \"list-group-item\" +\n                            (items[item] === selectedItem ? \" active\" : \"\")\n                        }\n                        onClick={() => onItemSelect(items[item])}\n                        role=\"button\"\n                    >\n                        {items[item][contentProperty]}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n    return (\n        <ul className=\"list-group\">\n            {items.map((item) => (\n                <li\n                    key={item[valueProperty]}\n                    className={\n                        \"list-group-item\" +\n                        (item === selectedItem ? \" active\" : \"\")\n                    }\n                    onClick={() => onItemSelect(item)}\n                    role=\"button\"\n                >\n                    {item[contentProperty]}\n                </li>\n            ))}\n        </ul>\n    );\n};\nGroupList.defaultProps = {\n    valueProperty: \"_id\",\n    contentProperty: \"name\"\n};\nGroupList.propTypes = {\n    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    valueProperty: PropTypes.string.isRequired,\n    contentProperty: PropTypes.string.isRequired,\n    onItemSelect: PropTypes.func,\n    selectedItem: PropTypes.object\n};\n\nexport default GroupList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst SearchStatus = ({ length }) => {\n    const renderPhrase = (number) => {\n        const lastOne = Number(number.toString().slice(-1));\n        if (number > 4 && number < 15) {\n            return \"человек тусанет\";\n        }\n        if (lastOne === 1) return \"человек тусанет\";\n        if ([2, 3, 4].indexOf(lastOne) >= 0) return \"человека тусанут\";\n        return \"человек тусанет\";\n    };\n    return (\n        <h2>\n            <span\n                className={\"badge \" + (length > 0 ? \"bg-primary\" : \"bg-danger\")}\n            >\n                {length > 0\n                    ? `${length + \" \" + renderPhrase(length)}   с тобой сегодня`\n                    : \"Никто с тобой не тусанет\"}\n            </span>\n        </h2>\n    );\n};\nSearchStatus.propTypes = {\n    length: PropTypes.number\n};\n\nexport default SearchStatus;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst BookMark = ({ status, ...rest }) => {\n    return (\n        <button {...rest}>\n            <i className={\"bi bi-bookmark\" + (status ? \"-heart-fill\" : \"\")}></i>\n        </button>\n    );\n};\nBookMark.propTypes = {\n    status: PropTypes.bool\n};\n\nexport default BookMark;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nconst TableBody = ({ data, columns }) => {\n    const renderContent = (item, column) => {\n        if (columns[column].component) {\n            const component = columns[column].component;\n            if (typeof component === \"function\") {\n                return component(item);\n            }\n            return component;\n        }\n        return _.get(item, columns[column].path);\n    };\n    return (\n        <tbody>\n            {data.map((item) => (\n                <tr key={item._id}>\n                    {Object.keys(columns).map((column) => (\n                        <td key={column}>{renderContent(item, column)}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    );\n};\n\nTableBody.propTypes = {\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst TableHeader = ({ onSort, selectedSort, columns }) => {\n    const handleSort = (item) => {\n        if (selectedSort.path === item) {\n            onSort({\n                ...selectedSort,\n                order: selectedSort.order === \"asc\" ? \"desc\" : \"asc\"\n            });\n        } else {\n            onSort({ path: item, order: \"asc\" });\n        }\n    };\n    const rendeSortArrow = (selectedSort, currentPath) => {\n        if (selectedSort.path === currentPath) {\n            if (selectedSort.order === \"asc\") {\n                return <i className=\"bi bi-caret-down-fill\"></i>;\n            } else {\n                return <i className=\"bi bi-caret-up-fill\"></i>;\n            }\n        }\n        return null;\n    };\n\n    return (\n        <thead>\n            <tr>\n                {Object.keys(columns).map((column) => (\n                    <th\n                        key={column}\n                        onClick={\n                            columns[column].path\n                                ? () => handleSort(columns[column].path)\n                                : undefined\n                        }\n                        {...{ role: columns[column].path && \"button\" }}\n                        scope=\"col\"\n                    >\n                        {columns[column].name}{\" \"}\n                        {rendeSortArrow(selectedSort, columns[column].path)}\n                    </th>\n                ))}\n            </tr>\n        </thead>\n    );\n};\nTableHeader.propTypes = {\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableHeader;\n","import Table from \"./table\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nexport default Table;\n\nexport { TableBody, TableHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\n\nconst Table = ({ onSort, selectedSort, columns, data, children }) => {\n    return (\n        <table className=\"table\">\n            {children || (\n                <>\n                    <TableHeader {...{ onSort, selectedSort, columns }} />\n                    <TableBody {...{ columns, data }} />\n                </>\n            )}\n        </table>\n    );\n};\nTable.propTypes = {\n    onSort: PropTypes.func,\n    selectedSort: PropTypes.object,\n    columns: PropTypes.object,\n    data: PropTypes.array,\n    children: PropTypes.array\n};\n\nexport default Table;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport {\n    getProfessionbyId,\n    getProfessionsLoadingStatus\n} from \"../../store/professions\";\n\nconst Profession = ({ id }) => {\n    const isLoading = useSelector(getProfessionsLoadingStatus());\n    const prof = useSelector(getProfessionbyId(id));\n    if (!isLoading) {\n        return <p>{prof.name}</p>;\n    } else return \"loading ...\";\n};\nProfession.propTypes = {\n    id: PropTypes.string\n};\nexport default Profession;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport BookMark from \"../common/bookmark\";\nimport Qualities from \"./qualities\";\nimport Table from \"../common/table\";\nimport { Link } from \"react-router-dom\";\nimport Profession from \"./profession\";\n\nconst UserTable = ({\n    users,\n    onSort,\n    selectedSort,\n    onToggleBookMark,\n    ...rest\n}) => {\n    const columns = {\n        name: {\n            path: \"name\",\n            name: \"Имя\",\n            component: (user) => (\n                <Link to={`/users/${user._id}`}>{user.name}</Link>\n            )\n        },\n        qualities: {\n            name: \"Качества\",\n            component: (user) => <Qualities qualities={user.qualities} />\n        },\n        professions: {\n            name: \"Профессия\",\n            component: (user) => <Profession id={user.profession} />\n        },\n        completedMeetings: {\n            path: \"completedMeetings\",\n            name: \"Встретился, раз\"\n        },\n        rate: { path: \"rate\", name: \"Оценка\" },\n        bookmark: {\n            path: \"bookmark\",\n            name: \"Избранное\",\n            component: (user) => (\n                <BookMark\n                    status={user.bookmark}\n                    onClick={() => onToggleBookMark(user._id)}\n                />\n            )\n        }\n    };\n    return (\n        <Table\n            onSort={onSort}\n            selectedSort={selectedSort}\n            columns={columns}\n            data={users}\n        />\n    );\n};\n\nUserTable.propTypes = {\n    users: PropTypes.array.isRequired,\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    onToggleBookMark: PropTypes.func.isRequired\n};\n\nexport default UserTable;\n","import UsersListPage from \"./usersListPage\";\nexport default UsersListPage;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { paginate } from \"../../../utils/paginate\";\nimport Pagination from \"../../common/pagination\";\nimport GroupList from \"../../common/groupList\";\nimport SearchStatus from \"../../ui/searchStatus\";\nimport UserTable from \"../../ui/usersTable\";\nimport _ from \"lodash\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUserId, getUsersList } from \"../../../store/users\";\nconst UsersListPage = () => {\n    const users = useSelector(getUsersList());\n    const currentUserId = useSelector(getCurrentUserId());\n\n    const professions = useSelector(getProfessions());\n    const professionsLoading = useSelector(getProfessionsLoadingStatus());\n    const [currentPage, setCurrentPage] = useState(1);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [selectedProf, setSelectedProf] = useState();\n    const [sortBy, setSortBy] = useState({ path: \"name\", order: \"asc\" });\n    const pageSize = 8;\n\n    const handleDelete = (userId) => {};\n    const handleToggleBookMark = (id) => {\n        const newArray = users.map((user) => {\n            if (user._id === id) {\n                return { ...user, bookmark: !user.bookmark };\n            }\n            return user;\n        });\n        // setUsers(newArray);\n        console.log(newArray);\n    };\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [selectedProf, searchQuery]);\n\n    const handleProfessionSelect = (item) => {\n        if (searchQuery !== \"\") setSearchQuery(\"\");\n        setSelectedProf(item);\n    };\n    const handleSearchQuery = ({ target }) => {\n        setSelectedProf(undefined);\n        setSearchQuery(target.value);\n    };\n\n    const handlePageChange = (pageIndex) => {\n        setCurrentPage(pageIndex);\n    };\n    const handleSort = (item) => {\n        setSortBy(item);\n    };\n\n    function filterUsers(data) {\n        const filteredUsers = searchQuery\n            ? data.filter(\n                  (user) =>\n                      user.name\n                          .toLowerCase()\n                          .indexOf(searchQuery.toLowerCase()) !== -1\n              )\n            : selectedProf\n            ? data.filter((user) => user.profession === selectedProf._id)\n            : data;\n        return filteredUsers.filter((u) => u._id !== currentUserId);\n    }\n    const filteredUsers = filterUsers(users);\n    const count = filteredUsers.length;\n    const sortedUsers = _.orderBy(filteredUsers, [sortBy.path], [sortBy.order]);\n    const usersCrop = paginate(sortedUsers, currentPage, pageSize);\n    const clearFilter = () => {\n        setSelectedProf();\n    };\n\n    return (\n        <div className=\"d-flex\">\n            {professions && !professionsLoading && (\n                <div className=\"d-flex flex-column flex-shrink-0 p-3\">\n                    <GroupList\n                        selectedItem={selectedProf}\n                        items={professions}\n                        onItemSelect={handleProfessionSelect}\n                    />\n                    <button\n                        className=\"btn btn-secondary mt-2\"\n                        onClick={clearFilter}\n                    >\n                        Очиститть\n                    </button>\n                </div>\n            )}\n            <div className=\"d-flex flex-column\">\n                <SearchStatus length={count} />\n                <input\n                    type=\"text\"\n                    name=\"searchQuery\"\n                    placeholder=\"Search...\"\n                    onChange={handleSearchQuery}\n                    value={searchQuery}\n                />\n                {count > 0 && (\n                    <UserTable\n                        users={usersCrop}\n                        onSort={handleSort}\n                        selectedSort={sortBy}\n                        onDelete={handleDelete}\n                        onToggleBookMark={handleToggleBookMark}\n                    />\n                )}\n                <div className=\"d-flex justify-content-center\">\n                    <Pagination\n                        itemsCount={count}\n                        pageSize={pageSize}\n                        currentPage={currentPage}\n                        onPageChange={handlePageChange}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nUsersListPage.propTypes = {\n    users: PropTypes.array\n};\n\nexport default UsersListPage;\n","import _ from \"lodash\";\n\nexport function paginate(items, pageNumber, pageSize) {\n    const startIndex = (pageNumber - 1) * pageSize;\n    return _(items).slice(startIndex).take(pageSize).value();\n}\n","import { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDataStatus, loadUsersList } from \"../../../store/users\";\n\nconst UsersLoader = ({ children }) => {\n    const dataStatus = useSelector(getDataStatus());\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (!dataStatus) dispatch(loadUsersList());\n    }, []);\n    if (!dataStatus) return \"Loading\";\n    return children;\n};\n\nUsersLoader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\nexport default UsersLoader;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams, Redirect } from \"react-router-dom\";\nimport EditUserPage from \"../components/page/editUserPage\";\nimport UserPage from \"../components/page/userPage\";\nimport UsersListPage from \"../components/page/usersListPage\";\nimport UsersLoader from \"../components/ui/hoc/usersLoader\";\n\nimport { getCurrentUserId } from \"../store/users\";\nconst Users = () => {\n    const params = useParams();\n    const { userId, edit } = params;\n    const currentUserId = useSelector(getCurrentUserId());\n\n    return (\n        <>\n            <UsersLoader>\n                {userId ? (\n                    edit ? (\n                        userId === currentUserId ? (\n                            <EditUserPage />\n                        ) : (\n                            <Redirect to={`/users/${currentUserId}/edit`} />\n                        )\n                    ) : (\n                        <UserPage userId={userId} />\n                    )\n                ) : (\n                    <UsersListPage />\n                )}\n            </UsersLoader>\n        </>\n    );\n};\n\nexport default Users;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CheckBoxField = ({ name, value, onChange, children, error }) => {\n    const handleChange = () => {\n        onChange({ name: name, value: !value });\n    };\n    const getInputClasses = () => {\n        return \"form-check-input\" + (error ? \" is-invalid\" : \"\");\n    };\n    return (\n        <div className=\"form-check mb-4\">\n            <input\n                className={getInputClasses()}\n                type=\"checkbox\"\n                value=\"\"\n                id={name}\n                onChange={handleChange}\n                checked={value}\n            />\n            <label className=\"form-check-label \" htmlFor={name}>\n                {children}\n            </label>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\nCheckBoxField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.bool,\n    onChange: PropTypes.func,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n    error: PropTypes.string\n};\n\nexport default CheckBoxField;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAuthErrors, login } from \"../../store/users\";\n\nconst LoginForm = () => {\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        stayOn: false\n    });\n    const loginError = useSelector(getAuthErrors());\n    const history = useHistory();\n    const dispath = useDispatch();\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязателкн для заполнения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const redirect = history.location.state\n            ? history.location.state.from.pathname\n            : \"/\";\n\n        dispath(login({ payload: data, redirect }));\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <CheckBoxField\n                value={data.stayOn}\n                onChange={handleChange}\n                name=\"stayOn\"\n            >\n                Оставаться в системе\n            </CheckBoxField>\n            {loginError && <p className=\"text-danger\">{loginError}</p>}\n\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default LoginForm;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport SelectField from \"../common/form/selectField\";\nimport RadioField from \"../common/form/radio.Field\";\nimport MultiSelectField from \"../common/form/multiSelectField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getQualities } from \"../../store/qualities\";\nimport { getProfessions } from \"../../store/professions\";\nimport { signUp } from \"../../store/users\";\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        profession: \"\",\n        sex: \"male\",\n        name: \"\",\n        qualities: [],\n        licence: false\n    });\n\n    const qualities = useSelector(getQualities());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Имя обязательно для заполнения\"\n            },\n            min: {\n                message: \"Имя должено состаять миниму из 3 символов\",\n                value: 3\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязательна для заполнения\"\n            },\n            isCapitalSymbol: {\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\n            },\n            isContainDigit: {\n                message: \"Пароль должен содержать хотя бы одно число\"\n            },\n            min: {\n                message: \"Пароль должен состаять миниму из 8 символов\",\n                value: 8\n            }\n        },\n        profession: {\n            isRequired: {\n                message: \"Обязательно выберите вашу профессию\"\n            }\n        },\n        licence: {\n            isRequired: {\n                message:\n                    \"Вы не можете использовать наш сервис без подтреврждения лицензионного соглашения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const newData = {\n            ...data,\n            qualities: data.qualities.map((q) => q.value)\n        };\n        dispatch(signUp(newData));\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Имя\"\n                name=\"name\"\n                value={data.name}\n                onChange={handleChange}\n                error={errors.name}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <SelectField\n                label=\"Выбери свою профессию\"\n                defaultOption=\"Choose...\"\n                name=\"profession\"\n                options={professionsList}\n                onChange={handleChange}\n                value={data.profession}\n                error={errors.profession}\n            />\n            <RadioField\n                options={[\n                    { name: \"Male\", value: \"male\" },\n                    { name: \"Female\", value: \"female\" },\n                    { name: \"Other\", value: \"other\" }\n                ]}\n                value={data.sex}\n                name=\"sex\"\n                onChange={handleChange}\n                label=\"Выберите ваш пол\"\n            />\n            <MultiSelectField\n                options={qualitiesList}\n                onChange={handleChange}\n                name=\"qualities\"\n                label=\"Выберите ваши качесвта\"\n            />\n            <CheckBoxField\n                value={data.licence}\n                onChange={handleChange}\n                name=\"licence\"\n                error={errors.licence}\n            >\n                Подтвердить <a>лицензионное соглашение</a>\n            </CheckBoxField>\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default RegisterForm;\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport LoginForm from \"../components/ui/loginForm\";\nimport RegisterForm from \"../components/ui/registerForm\";\n\nconst Login = () => {\n    const { type } = useParams();\n    const [formType, setFormType] = useState(\n        type === \"register\" ? type : \"login\"\n    );\n    const toggleFormType = (params) => {\n        setFormType((prevState) =>\n            prevState === \"register\" ? \"login\" : \"register\"\n        );\n    };\n\n    return (\n        <div className=\"container mt-5\">\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {formType === \"register\" ? (\n                        <>\n                            <h3 className=\"mb-4\">Register</h3>\n                            <RegisterForm />\n                            <p>\n                                Already have account?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Sign In\n                                </a>\n                            </p>\n                        </>\n                    ) : (\n                        <>\n                            <h3 className=\"mb-4\">Login</h3>\n                            <LoginForm />\n                            <p>\n                                Dont have account?{\" \"}\n                                <a role=\"button\" onClick={toggleFormType}>\n                                    {\" \"}\n                                    Sign Up\n                                </a>\n                            </p>\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Login;\n","import React from \"react\";\n\nconst Main = () => {\n    return (\n        <div className=\"container mt-5\">\n            <h1> Main Page</h1>\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { getCurrentUserData } from \"../../store/users\";\nconst NavProfile = () => {\n    const currentUser = useSelector(getCurrentUserData());\n    const [isOpen, setOpen] = useState(false);\n    const toggleMenu = () => {\n        setOpen((prevState) => !prevState);\n    };\n\n    if (!currentUser) return \"loading\";\n    return (\n        <div className=\"dropdown\" onClick={toggleMenu}>\n            <div className=\"btn dropdown-toggle d-flex align-items-center\">\n                <div className=\"me-2\">{currentUser.name}</div>\n                <img\n                    src={currentUser.image}\n                    alt=\"\"\n                    height=\"40\"\n                    className=\"img-responsive rounded-circle\"\n                />\n            </div>\n            <div className={\"w-100 dropdown-menu\" + (isOpen ? \" show\" : \"\")}>\n                <Link\n                    to={`/users/${currentUser._id}`}\n                    className=\"dropdown-item\"\n                >\n                    Profile\n                </Link>\n                <Link to=\"/logout\" className=\"dropdown-item\">\n                    Log Out\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default NavProfile;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { getIsLoggedIn } from \"../../store/users\";\nimport NavProfile from \"./navProfile\";\nconst NavBar = () => {\n    const isLoggedIn = useSelector(getIsLoggedIn());\n    return (\n        <nav className=\"navbar bg-light mb-3\">\n            <div className=\"container-fluid\">\n                <ul className=\"nav\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\n                            Main\n                        </Link>\n                    </li>\n                    {isLoggedIn && (\n                        <li className=\"nav-item\">\n                            <Link\n                                className=\"nav-link \"\n                                aria-current=\"page\"\n                                to=\"/users\"\n                            >\n                                Users\n                            </Link>\n                        </li>\n                    )}\n                </ul>\n                <div className=\"d-flex\">\n                    {isLoggedIn ? (\n                        <NavProfile />\n                    ) : (\n                        <Link\n                            className=\"nav-link \"\n                            aria-current=\"page\"\n                            to=\"/login\"\n                        >\n                            Login\n                        </Link>\n                    )}\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { getIsLoggedIn } from \"../../store/users\";\nconst ProtectedRoute = ({ component: Component, children, ...rest }) => {\n    const isLoggedIn = useSelector(getIsLoggedIn());\n\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                if (!isLoggedIn) {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: {\n                                    from: props.location\n                                }\n                            }}\n                        />\n                    );\n                }\n                return Component ? <Component {...props} /> : children;\n            }}\n        />\n    );\n};\nProtectedRoute.propTypes = {\n    component: PropTypes.func,\n    location: PropTypes.object,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nexport default ProtectedRoute;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { logOut } from \"../store/users\";\nconst LogOut = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(logOut());\n    }, []);\n    return <h1>Loading</h1>;\n};\n\nexport default LogOut;\n","import { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getIsLoggedIn,\n    getUsersLoadingStatus,\n    loadUsersList\n} from \"../../../store/users\";\nimport { loadQualitiesList } from \"../../../store/qualities\";\nimport { loadProfessionsList } from \"../../../store/professions\";\n\nconst AppLoader = ({ children }) => {\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector(getIsLoggedIn());\n    const usersStatusLoading = useSelector(getUsersLoadingStatus());\n    useEffect(() => {\n        dispatch(loadQualitiesList());\n        dispatch(loadProfessionsList());\n        if (isLoggedIn) {\n            dispatch(loadUsersList());\n        }\n    }, [isLoggedIn]);\n    if (usersStatusLoading) return \"loading\";\n    return children;\n};\n\nAppLoader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\nexport default AppLoader;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Users from \"./layouts/users\";\nimport Login from \"./layouts/login\";\nimport Main from \"./layouts/main\";\nimport NavBar from \"./components/ui/navBar\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport ProtectedRoute from \"./components/common/protectedRoute\";\nimport LogOut from \"./layouts/logOut\";\nimport AppLoader from \"./components/ui/hoc/appLoader\";\n\nfunction App() {\n    return (\n        <div>\n            <AppLoader>\n                <NavBar />\n                <Switch>\n                    <ProtectedRoute\n                        path=\"/users/:userId?/:edit?\"\n                        component={Users}\n                    />\n                    <Route path=\"/login/:type?\" component={Login} />\n                    <Route path=\"/logout\" component={LogOut} />\n                    <Route path=\"/\" exact component={Main} />\n                    <Redirect to=\"/\" />\n                </Switch>\n            </AppLoader>\n            <ToastContainer />\n        </div>\n    );\n}\n\nexport default App;\n","import commentsReducer from \"./comments\";\nimport professionsReducer from \"./professions\";\nimport qualitiesReducer from \"./qualities\";\nimport usersReducer from \"./users\";\n\nconst { combineReducers, configureStore } = require(\"@reduxjs/toolkit\");\n\nconst rootReducer = combineReducers({\n    qualities: qualitiesReducer,\n    professions: professionsReducer,\n    users: usersReducer,\n    comments: commentsReducer\n});\n\nexport function createStore() {\n    return configureStore({\n        reducer: rootReducer\n    });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./app/App\";\nimport { Router } from \"react-router-dom\";\nimport { createStore } from \"./app/store/createStore\";\nimport { Provider } from \"react-redux\";\nimport history from \"./app/utils/history\";\n\nconst store = createStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Router history={history}>\n                <App />\n            </Router>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}