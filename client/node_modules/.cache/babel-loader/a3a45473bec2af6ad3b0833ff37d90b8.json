{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\nimport isOutdated from \"../utils/isOutdated\";\nconst initialState = {\n  entities: null,\n  isLoading: true,\n  error: null,\n  lastFetch: null\n};\nconst professionsSlice = createSlice({\n  name: \"professions\",\n  initialState,\n  reducers: {\n    professionsRequested: state => {\n      state.isLoading = true;\n    },\n    professionsReceved: (state, action) => {\n      state.entities = action.payload;\n      state.lastFetch = Date.now();\n      state.isLoading = false;\n    },\n    professionsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer: professionsReducer,\n  actions\n} = professionsSlice;\nconst {\n  professionsRequested,\n  professionsReceved,\n  professionsRequestFiled\n} = actions;\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n  const {\n    lastFetch\n  } = getState().professions;\n  if (isOutdated(lastFetch)) {\n    dispatch(professionsRequested());\n    try {\n      const {\n        content\n      } = await professionService.get();\n      dispatch(professionsReceved(content));\n    } catch (error) {\n      dispatch(professionsRequestFiled(error.message));\n    }\n  }\n};\nexport const getProfessions = () => state => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => state => state.professions.isLoading;\nexport const getProfessionbyId = id => state => {\n  if (state.professions.entities) {\n    return state.professions.entities.find(p => p._id === id);\n  }\n};\nexport default professionsReducer;","map":{"version":3,"names":["createSlice","professionService","isOutdated","initialState","entities","isLoading","error","lastFetch","professionsSlice","name","reducers","professionsRequested","state","professionsReceved","action","payload","Date","now","professionsRequestFiled","reducer","professionsReducer","actions","loadProfessionsList","dispatch","getState","professions","content","get","message","getProfessions","getProfessionsLoadingStatus","getProfessionbyId","id","find","p","_id"],"sources":["/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/store/professions.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\ninterface ProfessionsState {\n    entities: null;\n    isLoading: boolean;\n    error: null;\n    lastFetch: number | null;\n}\n\nconst initialState: ProfessionsState = {\n    entities: null,\n    isLoading: true,\n    error: null,\n    lastFetch: null\n};\n\nconst professionsSlice = createSlice({\n    name: \"professions\",\n    initialState,\n    reducers: {\n        professionsRequested: (state) => {\n            state.isLoading = true;\n        },\n        professionsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        professionsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: professionsReducer, actions } = professionsSlice;\nconst { professionsRequested, professionsReceved, professionsRequestFiled } =\n    actions;\n\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().professions;\n    if (isOutdated(lastFetch)) {\n        dispatch(professionsRequested());\n        try {\n            const { content } = await professionService.get();\n            dispatch(professionsReceved(content));\n        } catch (error) {\n            dispatch(professionsRequestFiled(error.message));\n        }\n    }\n};\nexport const getProfessions = () => (state) => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => (state) =>\n    state.professions.isLoading;\nexport const getProfessionbyId = (id) => (state) => {\n    if (state.professions.entities) {\n        return state.professions.entities.find((p) => p._id === id);\n    }\n};\nexport default professionsReducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,UAAU,MAAM,qBAAqB;AAS5C,MAAMC,YAA8B,GAAG;EACnCC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE;AACf,CAAC;AAED,MAAMC,gBAAgB,GAAGR,WAAW,CAAC;EACjCS,IAAI,EAAE,aAAa;EACnBN,YAAY;EACZO,QAAQ,EAAE;IACNC,oBAAoB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAACP,SAAS,GAAG,IAAI;IAC1B,CAAC;IACDQ,kBAAkB,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnCF,KAAK,CAACR,QAAQ,GAAGU,MAAM,CAACC,OAAO;MAC/BH,KAAK,CAACL,SAAS,GAAGS,IAAI,CAACC,GAAG,EAAE;MAC5BL,KAAK,CAACP,SAAS,GAAG,KAAK;IAC3B,CAAC;IACDa,uBAAuB,EAAE,CAACN,KAAK,EAAEE,MAAM,KAAK;MACxCF,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACP,SAAS,GAAG,KAAK;IAC3B;EACJ;AACJ,CAAC,CAAC;AAEF,MAAM;EAAEc,OAAO,EAAEC,kBAAkB;EAAEC;AAAQ,CAAC,GAAGb,gBAAgB;AACjE,MAAM;EAAEG,oBAAoB;EAAEE,kBAAkB;EAAEK;AAAwB,CAAC,GACvEG,OAAO;AAEX,OAAO,MAAMC,mBAAmB,GAAG,MAAM,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACnE,MAAM;IAAEjB;EAAU,CAAC,GAAGiB,QAAQ,EAAE,CAACC,WAAW;EAC5C,IAAIvB,UAAU,CAACK,SAAS,CAAC,EAAE;IACvBgB,QAAQ,CAACZ,oBAAoB,EAAE,CAAC;IAChC,IAAI;MACA,MAAM;QAAEe;MAAQ,CAAC,GAAG,MAAMzB,iBAAiB,CAAC0B,GAAG,EAAE;MACjDJ,QAAQ,CAACV,kBAAkB,CAACa,OAAO,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACZiB,QAAQ,CAACL,uBAAuB,CAACZ,KAAK,CAACsB,OAAO,CAAC,CAAC;IACpD;EACJ;AACJ,CAAC;AACD,OAAO,MAAMC,cAAc,GAAG,MAAOjB,KAAK,IAAKA,KAAK,CAACa,WAAW,CAACrB,QAAQ;AACzE,OAAO,MAAM0B,2BAA2B,GAAG,MAAOlB,KAAK,IACnDA,KAAK,CAACa,WAAW,CAACpB,SAAS;AAC/B,OAAO,MAAM0B,iBAAiB,GAAIC,EAAE,IAAMpB,KAAK,IAAK;EAChD,IAAIA,KAAK,CAACa,WAAW,CAACrB,QAAQ,EAAE;IAC5B,OAAOQ,KAAK,CAACa,WAAW,CAACrB,QAAQ,CAAC6B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKH,EAAE,CAAC;EAC/D;AACJ,CAAC;AACD,eAAeZ,kBAAkB"},"metadata":{},"sourceType":"module"}