{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport professions from \"../mockData/professions.json\";\nimport qualities from \"../mockData/qualities.json\";\nimport users from \"../mockData/users.json\";\nimport httpService from \"../services/http.service\";\nconst useMockData = () => {\n  _s();\n  const statusConsts = {\n    idle: \"Not Started\",\n    pending: \"In Process\",\n    successed: \"Ready\",\n    error: \"Error occurred\"\n  };\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(statusConsts.idle);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(0);\n  const summaryCount = professions.length + qualities.length + users.length;\n  const incrementCount = () => {\n    setCount(prevState => prevState + 1);\n  };\n  const updateProgress = () => {\n    if (count !== 0 && status === statusConsts.idle) {\n      setStatus(statusConsts.pending);\n    }\n    const newProgress = Math.floor(count / summaryCount * 100);\n    if (progress < newProgress) {\n      setProgress(() => newProgress);\n    }\n    if (newProgress === 100) {\n      setStatus(statusConsts.successed);\n    }\n  };\n  useEffect(() => {\n    updateProgress();\n  }, [count]);\n  async function initialize() {\n    try {\n      for (const prof of professions) {\n        await httpService.put(\"profession/\" + prof._id, prof);\n        incrementCount();\n      }\n      for (const user of users) {\n        await httpService.put(\"user/\" + user._id, user);\n        incrementCount();\n      }\n      for (const qual of qualities) {\n        await httpService.put(\"quality/\" + qual._id, qual);\n        incrementCount();\n      }\n    } catch (error) {\n      setError(error);\n      setStatus(statusConsts.error);\n    }\n  }\n  return {\n    error,\n    initialize,\n    progress,\n    status\n  };\n};\n_s(useMockData, \"amu5tmYtTHr7RvcKvCBY0uEpGV0=\");\nexport default useMockData;","map":{"version":3,"names":["useEffect","useState","professions","qualities","users","httpService","useMockData","statusConsts","idle","pending","successed","error","setError","status","setStatus","progress","setProgress","count","setCount","summaryCount","length","incrementCount","prevState","updateProgress","newProgress","Math","floor","initialize","prof","put","_id","user","qual"],"sources":["/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/utils/mockData.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport professions from \"../mockData/professions.json\";\nimport qualities from \"../mockData/qualities.json\";\nimport users from \"../mockData/users.json\";\nimport httpService from \"../services/http.service\";\n\nconst useMockData = () => {\n    const statusConsts = {\n        idle: \"Not Started\",\n        pending: \"In Process\",\n        successed: \"Ready\",\n        error: \"Error occurred\"\n    };\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(statusConsts.idle);\n    const [progress, setProgress] = useState(0);\n    const [count, setCount] = useState(0);\n    const summaryCount = professions.length + qualities.length + users.length;\n    const incrementCount = () => {\n        setCount((prevState) => prevState + 1);\n    };\n    const updateProgress = () => {\n        if (count !== 0 && status === statusConsts.idle) {\n            setStatus(statusConsts.pending);\n        }\n        const newProgress = Math.floor((count / summaryCount) * 100);\n        if (progress < newProgress) {\n            setProgress(() => newProgress);\n        }\n        if (newProgress === 100) {\n            setStatus(statusConsts.successed);\n        }\n    };\n\n    useEffect(() => {\n        updateProgress();\n    }, [count]);\n    async function initialize() {\n        try {\n            for (const prof of professions) {\n                await httpService.put(\"profession/\" + prof._id, prof);\n                incrementCount();\n            }\n            for (const user of users) {\n                await httpService.put(\"user/\" + user._id, user);\n                incrementCount();\n            }\n            for (const qual of qualities) {\n                await httpService.put(\"quality/\" + qual._id, qual);\n                incrementCount();\n            }\n        } catch (error) {\n            setError(error);\n            setStatus(statusConsts.error);\n        }\n    }\n\n    return { error, initialize, progress, status };\n};\n\nexport default useMockData;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,WAAW,MAAM,0BAA0B;AAElD,MAAMC,WAAW,GAAG,MAAM;EAAA;EACtB,MAAMC,YAAY,GAAG;IACjBC,IAAI,EAAE,aAAa;IACnBC,OAAO,EAAE,YAAY;IACrBC,SAAS,EAAE,OAAO;IAClBC,KAAK,EAAE;EACX,CAAC;EACD,MAAM,CAACA,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAACM,YAAY,CAACC,IAAI,CAAC;EACvD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMkB,YAAY,GAAGjB,WAAW,CAACkB,MAAM,GAAGjB,SAAS,CAACiB,MAAM,GAAGhB,KAAK,CAACgB,MAAM;EACzE,MAAMC,cAAc,GAAG,MAAM;IACzBH,QAAQ,CAAEI,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;EAC1C,CAAC;EACD,MAAMC,cAAc,GAAG,MAAM;IACzB,IAAIN,KAAK,KAAK,CAAC,IAAIJ,MAAM,KAAKN,YAAY,CAACC,IAAI,EAAE;MAC7CM,SAAS,CAACP,YAAY,CAACE,OAAO,CAAC;IACnC;IACA,MAAMe,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAET,KAAK,GAAGE,YAAY,GAAI,GAAG,CAAC;IAC5D,IAAIJ,QAAQ,GAAGS,WAAW,EAAE;MACxBR,WAAW,CAAC,MAAMQ,WAAW,CAAC;IAClC;IACA,IAAIA,WAAW,KAAK,GAAG,EAAE;MACrBV,SAAS,CAACP,YAAY,CAACG,SAAS,CAAC;IACrC;EACJ,CAAC;EAEDV,SAAS,CAAC,MAAM;IACZuB,cAAc,EAAE;EACpB,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EACX,eAAeU,UAAU,GAAG;IACxB,IAAI;MACA,KAAK,MAAMC,IAAI,IAAI1B,WAAW,EAAE;QAC5B,MAAMG,WAAW,CAACwB,GAAG,CAAC,aAAa,GAAGD,IAAI,CAACE,GAAG,EAAEF,IAAI,CAAC;QACrDP,cAAc,EAAE;MACpB;MACA,KAAK,MAAMU,IAAI,IAAI3B,KAAK,EAAE;QACtB,MAAMC,WAAW,CAACwB,GAAG,CAAC,OAAO,GAAGE,IAAI,CAACD,GAAG,EAAEC,IAAI,CAAC;QAC/CV,cAAc,EAAE;MACpB;MACA,KAAK,MAAMW,IAAI,IAAI7B,SAAS,EAAE;QAC1B,MAAME,WAAW,CAACwB,GAAG,CAAC,UAAU,GAAGG,IAAI,CAACF,GAAG,EAAEE,IAAI,CAAC;QAClDX,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,OAAOV,KAAK,EAAE;MACZC,QAAQ,CAACD,KAAK,CAAC;MACfG,SAAS,CAACP,YAAY,CAACI,KAAK,CAAC;IACjC;EACJ;EAEA,OAAO;IAAEA,KAAK;IAAEgB,UAAU;IAAEZ,QAAQ;IAAEF;EAAO,CAAC;AAClD,CAAC;AAAC,GApDIP,WAAW;AAsDjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module"}