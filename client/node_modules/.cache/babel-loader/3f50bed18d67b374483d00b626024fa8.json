{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nconst initialState = {\n  entities: null,\n  isLoading: true,\n  error: null\n};\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    commentsRequested: state => {\n      state.isLoading = true;\n    },\n    commentsReceved: (state, action) => {\n      state.entities = action.payload;\n      state.isLoading = false;\n    },\n    commentsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    commetnCreated: (state, action) => {\n      state.entities.push(action.payload);\n    },\n    commentRemoved: (state, action) => {\n      state.entities = state.entities.filter(c => c._id !== action.payload);\n    }\n  }\n});\nconst {\n  reducer: commentsReducer,\n  actions\n} = commentsSlice;\nconst {\n  commentsRequested,\n  commentsReceved,\n  commentsRequestFiled,\n  commetnCreated,\n  commentRemoved\n} = actions;\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\nexport const loadCommentsList = userId => async dispatch => {\n  dispatch(commentsRequested());\n  try {\n    const {\n      content\n    } = await commentService.getComments(userId);\n    dispatch(commentsReceved(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error));\n  }\n};\nexport const createComment = payload => async (dispatch, getState) => {\n  dispatch(addCommentRequested());\n  try {\n    const {\n      content\n    } = await commentService.createComment(payload);\n    dispatch(commetnCreated(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error));\n  }\n};\nexport const removeComment = commentId => async dispatch => {\n  dispatch(removeCommentRequested());\n  try {\n    const {\n      content\n    } = await commentService.removeComment(commentId);\n    if (!content) {\n      dispatch(commentRemoved(commentId));\n    }\n  } catch (error) {\n    dispatch(commentsRequestFiled(error));\n  }\n};\nexport const getComments = () => state => state.comments.entities;\nexport const getCommentsLoadingStatus = () => state => state.comments.isLoading;\nexport default commentsReducer;","map":{"version":3,"names":["createAction","createSlice","commentService","initialState","entities","isLoading","error","commentsSlice","name","reducers","commentsRequested","state","commentsReceved","action","payload","commentsRequestFiled","commetnCreated","push","commentRemoved","filter","c","_id","reducer","commentsReducer","actions","addCommentRequested","removeCommentRequested","loadCommentsList","userId","dispatch","content","getComments","createComment","getState","removeComment","commentId","comments","getCommentsLoadingStatus"],"sources":["/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/store/comments.ts"],"sourcesContent":["import { IComment } from \"./../types/types\";\nimport { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nimport { AppDispatch } from \"./createStore\";\n\ninterface commentsState {\n    entities: null | any;\n    isLoading: boolean;\n    error: null | any;\n}\n\nconst initialState: commentsState = {\n    entities: null,\n    isLoading: true,\n    error: null\n};\n\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState,\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n        commentsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commetnCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        commentRemoved: (state, action) => {\n            state.entities = state.entities.filter(\n                (c: IComment) => c._id !== action.payload\n            );\n        }\n    }\n});\n\nconst { reducer: commentsReducer, actions } = commentsSlice;\nconst {\n    commentsRequested,\n    commentsReceved,\n    commentsRequestFiled,\n    commetnCreated,\n    commentRemoved\n} = actions;\n\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\n\nexport const loadCommentsList =\n    (userId: string) => async (dispatch: AppDispatch) => {\n        dispatch(commentsRequested());\n        try {\n            const { content } = await commentService.getComments(userId);\n            dispatch(commentsReceved(content));\n        } catch (error) {\n            dispatch(commentsRequestFiled(error));\n        }\n    };\nexport const createComment =\n    (payload: any) => async (dispatch: AppDispatch, getState: any) => {\n        dispatch(addCommentRequested());\n        try {\n            const { content } = await commentService.createComment(payload);\n            dispatch(commetnCreated(content));\n        } catch (error) {\n            dispatch(commentsRequestFiled(error));\n        }\n    };\nexport const removeComment =\n    (commentId: number) => async (dispatch: AppDispatch) => {\n        dispatch(removeCommentRequested());\n        try {\n            const { content } = await commentService.removeComment(commentId);\n            if (!content) {\n                dispatch(commentRemoved(commentId));\n            }\n        } catch (error) {\n            dispatch(commentsRequestFiled(error));\n        }\n    };\n\nexport const getComments = () => (state: { comments: { entities: any } }) =>\n    state.comments.entities;\nexport const getCommentsLoadingStatus =\n    () => (state: { comments: { isLoading: any } }) =>\n        state.comments.isLoading;\n\nexport default commentsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}