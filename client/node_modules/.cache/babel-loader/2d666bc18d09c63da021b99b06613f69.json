{"ast":null,"code":"var _jsxFileName = \"/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/components/ui/profession.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getProfessionbyId, getProfessionsLoadingStatus } from \"../../store/professions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profession = _ref => {\n  _s();\n  let {\n    id\n  } = _ref;\n  const isLoading = useSelector(getProfessionsLoadingStatus());\n  const prof = useSelector(getProfessionbyId(id));\n  if (!isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: prof.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"loading ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 19\n  }, this);\n};\n_s(Profession, \"NwKE9THfQIpfhJuQsAUFSkgh5o4=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Profession;\nexport default Profession;\nvar _c;\n$RefreshReg$(_c, \"Profession\");","map":{"version":3,"names":["React","useSelector","getProfessionbyId","getProfessionsLoadingStatus","Profession","id","isLoading","prof","name"],"sources":["/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/components/ui/profession.tsx"],"sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n    getProfessionbyId,\n    getProfessionsLoadingStatus\n} from \"../../store/professions\";\nimport { IProfession } from \"../../types/types\";\n\ninterface ProfessionProps {\n    id: string;\n}\n\nconst Profession = ({ id }: ProfessionProps) => {\n    const isLoading = useSelector(getProfessionsLoadingStatus());\n    const prof = useSelector(getProfessionbyId(id));\n    if (!isLoading) {\n        return <p>{prof.name}</p>;\n    } else return <h1>loading ...</h1>;\n};\n\nexport default Profession;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AACzC,SACIC,iBAAiB,EACjBC,2BAA2B,QACxB,yBAAyB;AAAC;AAOjC,MAAMC,UAAU,GAAG,QAA6B;EAAA;EAAA,IAA5B;IAAEC;EAAoB,CAAC;EACvC,MAAMC,SAAS,GAAGL,WAAW,CAACE,2BAA2B,EAAE,CAAC;EAC5D,MAAMI,IAAI,GAAGN,WAAW,CAACC,iBAAiB,CAACG,EAAE,CAAC,CAAC;EAC/C,IAAI,CAACC,SAAS,EAAE;IACZ,oBAAO;MAAA,UAAIC,IAAI,CAACC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAK;EAC7B,CAAC,MAAM,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAoB;AACtC,CAAC;AAAC,GANIJ,UAAU;EAAA,QACMH,WAAW,EAChBA,WAAW;AAAA;AAAA,KAFtBG,UAAU;AAQhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}