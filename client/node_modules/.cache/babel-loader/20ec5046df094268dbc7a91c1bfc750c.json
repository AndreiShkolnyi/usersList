{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\nconst professionsSlice = createSlice({\n  name: \"professions\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null,\n    lastFetch: null\n  },\n  reducers: {\n    professionsRequested: state => {\n      state.isLoading = true;\n    },\n    professionsReceved: (state, action) => {\n      state.entities = action.payload;\n      state.lastFetch = Date.now();\n      state.isLoading = false;\n    },\n    professionsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  actions,\n  reducer: professionsReducer\n} = professionsSlice;\nconst {\n  professionsRequested,\n  professionsReceved,\n  professionsRequestFiled\n} = actions;\nexport function isOutdated(date) {\n  if (Date.now() - date > 10 * 60 * 1000) {\n    return true;\n  }\n  return false;\n}\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n  const {\n    lastFetch\n  } = getState().qualities;\n  if (isOutdated(lastFetch)) {\n    dispatch(professionsRequested());\n    try {\n      const {\n        content\n      } = await professionService.get();\n      dispatch(professionsReceved(content));\n    } catch (error) {\n      dispatch(professionsRequestFiled(error.message));\n    }\n  }\n};\nexport const getProfessions = () => state => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => state => state.professions.isLoading;\n\n// export const getProfessionsByIds = (professionsIds) => (state) => {\n//  if (state.professions.entities) {\n//     const newProfessionsArray = [];\n//     for (const profId of professionsIds) {\n//         for (const profession of state.professions.entities) {\n//             if (profession._id === profId) {\n//                 newProfessionsArray.push(profession);\n//                 break;\n//             }\n//         }\n//     }\n//     return newProfessionsArray;\n//  }\n// };\n\nexport const getProfession = id => state => {\n  return state.professions.entities.find(p => p._id === id);\n};\nexport default professionsReducer;","map":{"version":3,"names":["createSlice","professionService","professionsSlice","name","initialState","entities","isLoading","error","lastFetch","reducers","professionsRequested","state","professionsReceved","action","payload","Date","now","professionsRequestFiled","actions","reducer","professionsReducer","isOutdated","date","loadProfessionsList","dispatch","getState","qualities","content","get","message","getProfessions","professions","getProfessionsLoadingStatus","getProfession","id","find","p","_id"],"sources":["/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/store/professions.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\n\nconst professionsSlice = createSlice({\n    name: \"professions\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        professionsRequested: (state) => {\n            state.isLoading = true;\n        },\n         professionsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        professionsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n\n    }\n});\n\nconst { actions, reducer: professionsReducer } = professionsSlice;\nconst { professionsRequested, professionsReceved, professionsRequestFiled } = actions;\n\nexport function isOutdated(date) {\n    if (Date.now() - date > 10 * 60 * 1000) {\n        return true;\n    }\n    return false;\n}\n\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().qualities;\n    if (isOutdated(lastFetch)) {\ndispatch(professionsRequested());\n        try {\n           const { content } = await professionService.get();\n           dispatch(professionsReceved(content));\n        } catch (error) {\n            dispatch(professionsRequestFiled(error.message));\n        }\n    }\n};\n\nexport const getProfessions = () => (state) => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => (state) => state.professions.isLoading;\n\n// export const getProfessionsByIds = (professionsIds) => (state) => {\n//  if (state.professions.entities) {\n//     const newProfessionsArray = [];\n//     for (const profId of professionsIds) {\n//         for (const profession of state.professions.entities) {\n//             if (profession._id === profId) {\n//                 newProfessionsArray.push(profession);\n//                 break;\n//             }\n//         }\n//     }\n//     return newProfessionsArray;\n//  }\n// };\n\n export const getProfession = (id) => (state) => {\n        return state.professions.entities.find((p) => p._id === id);\n    };\n\nexport default professionsReducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,iBAAiB,MAAM,gCAAgC;AAE9D,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;EACjCG,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACVC,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE,IAAI;IACfC,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACNC,oBAAoB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAACL,SAAS,GAAG,IAAI;IAC1B,CAAC;IACAM,kBAAkB,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpCF,KAAK,CAACN,QAAQ,GAAGQ,MAAM,CAACC,OAAO;MAC/BH,KAAK,CAACH,SAAS,GAAGO,IAAI,CAACC,GAAG,EAAE;MAC5BL,KAAK,CAACL,SAAS,GAAG,KAAK;IAC3B,CAAC;IACDW,uBAAuB,EAAE,CAACN,KAAK,EAAEE,MAAM,KAAK;MACxCF,KAAK,CAACJ,KAAK,GAAGM,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACL,SAAS,GAAG,KAAK;IAC3B;EAEJ;AACJ,CAAC,CAAC;AAEF,MAAM;EAAEY,OAAO;EAAEC,OAAO,EAAEC;AAAmB,CAAC,GAAGlB,gBAAgB;AACjE,MAAM;EAAEQ,oBAAoB;EAAEE,kBAAkB;EAAEK;AAAwB,CAAC,GAAGC,OAAO;AAErF,OAAO,SAASG,UAAU,CAACC,IAAI,EAAE;EAC7B,IAAIP,IAAI,CAACC,GAAG,EAAE,GAAGM,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;IACpC,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAM,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACnE,MAAM;IAAEjB;EAAU,CAAC,GAAGiB,QAAQ,EAAE,CAACC,SAAS;EAC1C,IAAIL,UAAU,CAACb,SAAS,CAAC,EAAE;IAC/BgB,QAAQ,CAACd,oBAAoB,EAAE,CAAC;IACxB,IAAI;MACD,MAAM;QAAEiB;MAAQ,CAAC,GAAG,MAAM1B,iBAAiB,CAAC2B,GAAG,EAAE;MACjDJ,QAAQ,CAACZ,kBAAkB,CAACe,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACZiB,QAAQ,CAACP,uBAAuB,CAACV,KAAK,CAACsB,OAAO,CAAC,CAAC;IACpD;EACJ;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOnB,KAAK,IAAKA,KAAK,CAACoB,WAAW,CAAC1B,QAAQ;AACzE,OAAO,MAAM2B,2BAA2B,GAAG,MAAOrB,KAAK,IAAKA,KAAK,CAACoB,WAAW,CAACzB,SAAS;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,OAAO,MAAM2B,aAAa,GAAIC,EAAE,IAAMvB,KAAK,IAAK;EACzC,OAAOA,KAAK,CAACoB,WAAW,CAAC1B,QAAQ,CAAC8B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKH,EAAE,CAAC;AAC/D,CAAC;AAEL,eAAed,kBAAkB"},"metadata":{},"sourceType":"module"}