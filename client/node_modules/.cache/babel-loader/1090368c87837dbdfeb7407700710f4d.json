{"ast":null,"code":"var _jsxFileName = \"/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/components/common/comments/addCommentForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TextAreaField from \"../form/textAreaField\";\nimport { validator } from \"../../../utils/validator\";\nimport PropTypes from \"prop-types\";\n\n// interface AddProps {\n//     onSubmit: (target: any) => void;\n// }\n\n// interface Data {\n//     content?: string;\n// }\n// interface Error {\n//     content?: string | undefined;\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = _ref => {\n  _s();\n  let {\n    onSubmit\n  } = _ref;\n  const [data, setData] = useState();\n  const [errors, setErrors] = useState();\n  const handleChange = target => {\n    setData(prevState => ({\n      ...prevState,\n      [target.name]: target.value\n    }));\n  };\n  const validatorConfog = {\n    content: {\n      isRequired: {\n        message: \"Сообщение не может быть пустым\"\n      }\n    }\n  };\n  const validate = () => {\n    const errors = validator(data, validatorConfog);\n    setErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n  const clearForm = () => {\n    setData({});\n    setErrors({});\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isValid = validate();\n    if (!isValid) return;\n    onSubmit(data);\n    clearForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"New comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextAreaField, {\n        value: data.content || \"\",\n        onChange: handleChange,\n        name: \"content\",\n        label: \"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n        error: errors.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-end\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          children: \"\\u041E\\u043F\\u0443\\u0431\\u043B\\u0438\\u043A\\u043E\\u0432\\u0430\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(Form, \"XHmHLIZIPoRSFNJcKbTl18ysFHY=\");\n_c = Form;\nGroupList.PropTypes = {\n  items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  valueProperty: PropTypes.string.isRequired,\n  contentProperty: PropTypes.string.isRequired,\n  onItemSelect: PropTypes.func,\n  selectedItem: PropTypes.object\n};\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","TextAreaField","validator","PropTypes","Form","onSubmit","data","setData","errors","setErrors","handleChange","target","prevState","name","value","validatorConfog","content","isRequired","message","validate","Object","keys","length","clearForm","handleSubmit","e","preventDefault","isValid","GroupList","items","oneOfType","object","array","valueProperty","string","contentProperty","onItemSelect","func","selectedItem"],"sources":["/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/components/common/comments/addCommentForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport TextAreaField from \"../form/textAreaField\";\nimport { validator } from \"../../../utils/validator\";\nimport PropTypes from \"prop-types\";\n\n// interface AddProps {\n//     onSubmit: (target: any) => void;\n// }\n\n// interface Data {\n//     content?: string;\n// }\n// interface Error {\n//     content?: string | undefined;\n// }\n\nconst Form = ({ onSubmit }) => {\n    const [data, setData] = useState();\n    const [errors, setErrors] = useState();\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        content: {\n            isRequired: {\n                message: \"Сообщение не может быть пустым\"\n            }\n        }\n    };\n\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n\n    const clearForm = () => {\n        setData({});\n        setErrors({});\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        onSubmit(data);\n        clearForm();\n    };\n\n    return (\n        <div>\n            <h2>New comment</h2>\n            <form onSubmit={handleSubmit}>\n                <TextAreaField\n                    value={data.content || \"\"}\n                    onChange={handleChange}\n                    name=\"content\"\n                    label=\"Сообщение\"\n                    error={errors.content}\n                />\n                <div className=\"d-flex justify-content-end\">\n                    <button className=\"btn btn-primary\">Опубликовать</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nGroupList.PropTypes = {\n    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    valueProperty: PropTypes.string.isRequired,\n    contentProperty: PropTypes.string.isRequired,\n    onItemSelect: PropTypes.func,\n    selectedItem: PropTypes.object\n};\n\nexport default Form;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,uBAAuB;AACjD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,IAAI,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,EAAE;EAClC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,EAAE;EACtC,MAAMU,YAAY,GAAIC,MAAM,IAAK;IAC7BJ,OAAO,CAAEK,SAAS,KAAM;MACpB,GAAGA,SAAS;MACZ,CAACD,MAAM,CAACE,IAAI,GAAGF,MAAM,CAACG;IAC1B,CAAC,CAAC,CAAC;EACP,CAAC;EACD,MAAMC,eAAe,GAAG;IACpBC,OAAO,EAAE;MACLC,UAAU,EAAE;QACRC,OAAO,EAAE;MACb;IACJ;EACJ,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAM;IACnB,MAAMX,MAAM,GAAGN,SAAS,CAACI,IAAI,EAAES,eAAe,CAAC;IAE/CN,SAAS,CAACD,MAAM,CAAC;IACjB,OAAOY,MAAM,CAACC,IAAI,CAACb,MAAM,CAAC,CAACc,MAAM,KAAK,CAAC;EAC3C,CAAC;EAED,MAAMC,SAAS,GAAG,MAAM;IACpBhB,OAAO,CAAC,CAAC,CAAC,CAAC;IACXE,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC;EACD,MAAMe,YAAY,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,EAAE;IAClB,MAAMC,OAAO,GAAGR,QAAQ,EAAE;IAC1B,IAAI,CAACQ,OAAO,EAAE;IACdtB,QAAQ,CAACC,IAAI,CAAC;IACdiB,SAAS,EAAE;EACf,CAAC;EAED,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoB,eACpB;MAAM,QAAQ,EAAEC,YAAa;MAAA,wBACzB,QAAC,aAAa;QACV,KAAK,EAAElB,IAAI,CAACU,OAAO,IAAI,EAAG;QAC1B,QAAQ,EAAEN,YAAa;QACvB,IAAI,EAAC,SAAS;QACd,KAAK,EAAC,wDAAW;QACjB,KAAK,EAAEF,MAAM,CAACQ;MAAQ;QAAA;QAAA;QAAA;MAAA,QACxB,eACF;QAAK,SAAS,EAAC,4BAA4B;QAAA,uBACvC;UAAQ,SAAS,EAAC,iBAAiB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAsB;QAAA;QAAA;QAAA;MAAA,QACvD;IAAA;MAAA;MAAA;MAAA;IAAA,QACH;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEd,CAAC;AAAC,GArDIZ,IAAI;AAAA,KAAJA,IAAI;AAuDVwB,SAAS,CAACzB,SAAS,GAAG;EAClB0B,KAAK,EAAE1B,SAAS,CAAC2B,SAAS,CAAC,CAAC3B,SAAS,CAAC4B,MAAM,EAAE5B,SAAS,CAAC6B,KAAK,CAAC,CAAC;EAC/DC,aAAa,EAAE9B,SAAS,CAAC+B,MAAM,CAACjB,UAAU;EAC1CkB,eAAe,EAAEhC,SAAS,CAAC+B,MAAM,CAACjB,UAAU;EAC5CmB,YAAY,EAAEjC,SAAS,CAACkC,IAAI;EAC5BC,YAAY,EAAEnC,SAAS,CAAC4B;AAC5B,CAAC;AAED,eAAe3B,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}