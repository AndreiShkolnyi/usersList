{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nimport { getCurrentUserId } from \"./users\";\nimport { nanoid } from \"nanoid\";\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    isDeleted: false,\n    error: null\n  },\n  reducers: {\n    commentsRequested: state => {\n      state.isLoading = true;\n    },\n    commentsReceved: (state, action) => {\n      state.entities = action.payload;\n      state.isLoading = false;\n    },\n    commentsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    commentCreated: (state, action) => {\n      state.entities.push(action.payload);\n    },\n    commentDeleted: (state, action) => {\n      state.entities = state.entities.filter(c => c._id !== action.payload);\n    }\n  }\n});\nconst {\n  actions,\n  reducer: commentsReducer\n} = commentsSlice;\nconst {\n  commentsRequested,\n  commentsReceved,\n  commentsRequestFiled,\n  commentCreated,\n  commentDeleted\n} = actions;\nconst addCommentRequested = createAction(\"commnets/addCommentRequested\");\nconst deleteCommentRequested = createAction(\"comments/deleteCommentRequested\");\nexport const loadCommentsList = userId => async dispatch => {\n  dispatch(commentsRequested());\n  try {\n    const {\n      content\n    } = await commentService.getComments(userId);\n    dispatch(commentsReceved(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const removeComment = id => async (dispatch, state) => {\n  dispatch(deleteCommentRequested());\n  try {\n    const {\n      content\n    } = await commentService.deleteComments(id);\n    if (content === null) {\n      dispatch(commentDeleted(id));\n    }\n    ;\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const createComment = payload => async (dispatch, getState) => {\n  dispatch(addCommentRequested(payload));\n  const comment = {\n    ...payload,\n    _id: nanoid(),\n    created_at: Date.now(),\n    userId: getCurrentUserId()(getState())\n  };\n  try {\n    const {\n      content\n    } = await commentService.createComment(comment);\n    dispatch(commentCreated(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const getComments = () => state => state.comments.entities;\nexport const getCommentsLoadingStatus = () => state => state.comments.isLoading;\nexport default commentsReducer;","map":{"version":3,"names":["createAction","createSlice","commentService","getCurrentUserId","nanoid","commentsSlice","name","initialState","entities","isLoading","isDeleted","error","reducers","commentsRequested","state","commentsReceved","action","payload","commentsRequestFiled","commentCreated","push","commentDeleted","filter","c","_id","actions","reducer","commentsReducer","addCommentRequested","deleteCommentRequested","loadCommentsList","userId","dispatch","content","getComments","message","removeComment","id","deleteComments","createComment","getState","comment","created_at","Date","now","comments","getCommentsLoadingStatus"],"sources":["/Users/sikollineu-iandeulei/Desktop/Userslist/usersList/client/src/app/store/comments.js"],"sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nimport { getCurrentUserId } from \"./users\";\nimport { nanoid } from \"nanoid\";\n\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        isDeleted: false,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n         commentsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commentCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        commentDeleted: (state, action) => {\n            state.entities = state.entities.filter(\n                (c) => c._id !== action.payload\n            );\n        }\n\n    }\n});\n\nconst { actions, reducer: commentsReducer } = commentsSlice;\nconst {\n commentsRequested,\n     commentsReceved,\n      commentsRequestFiled,\n    commentCreated,\n    commentDeleted\n } = actions;\n\nconst addCommentRequested = createAction(\"commnets/addCommentRequested\");\nconst deleteCommentRequested = createAction(\"comments/deleteCommentRequested\");\n\nexport const loadCommentsList = (userId) => async (dispatch) => {\ndispatch(commentsRequested());\n        try {\n           const { content } = await commentService.getComments(userId);\n           dispatch(commentsReceved(content));\n        } catch (error) {\n            dispatch(commentsRequestFiled(error.message));\n        }\n    };\n\nexport const removeComment = (id) => async (dispatch, state) => {\n    dispatch(deleteCommentRequested());\n    try {\n        const { content } = await commentService.deleteComments(id);\n        if (content === null) {\n             dispatch(commentDeleted(id));\n        };\n    } catch (error) {\n         dispatch(commentsRequestFiled(error.message));\n    }\n};\n\nexport const createComment = (payload) => async (dispatch, getState) => {\n   dispatch(addCommentRequested(payload));\n   const comment = {\n            ...payload,\n            _id: nanoid(),\n            created_at: Date.now(),\n            userId: getCurrentUserId()(getState())\n\n        };\n    try {\n         const { content } = await commentService.createComment(comment);\n        dispatch(commentCreated(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\n\nexport const getComments = () => (state) => state.comments.entities;\nexport const getCommentsLoadingStatus = () => (state) => state.comments.isLoading;\nexport default commentsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}